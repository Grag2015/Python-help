Python позволяет очень легко создавать веб-сервер
буквально так:
$ python -m SimpleHTTPServer

см. детали
http://www.linuxjournal.com/content/tech-tip-really-simple-http-server-python

# БОльше всего понравился этот (его поднимал для работы скриптов)
https://gist.github.com/bradmontgomery/2219997
мой код - https://bitbucket.org/Ryhor2017/plumbum/commits/bc9489856c3ccea6fbda438d61c6910823e71bbc

наткнулся на полезный сервис 
Convert curl syntax to Python https://curl.trillworks.com/

Также можно подвязать фреймворк
https://ruslanspivak.com/lsbaws-part2/
конфигурация Pyramid Framework http://www.informit.com/articles/article.aspx?p=2161677

Проброс порта, подключение к локальному сервису из Интернет
Можно выделить статический, динамический IP-адрес и серый IP-адрес, выходящий в инет через NAT.
Как пробросить порт и как проверить белый ли адрес - https://yadi.sk/i/Kh1ypdPOvfyLZ
Как пробросить порт (2) - http://oivt.ru/blog/dostup-k-lokalnomu-web-serveru-iz-interneta
Как пробросить порт (3) - http://compfixer.info/port-forwarding/

отображать все соединения и используемые порты.
Netstat –ao
Источник: [url=http://winreview.ru/kak-uznat-kakaya-programma-ispolzuet-tot-ili-inoj-port-v-windows-7/]Winreview.ru[/url]

Получение и обработка пакета комнат в виде JSON
тут блок-схема взаимодествия WSGI и Pyramid - https://yadi.sk/i/21xu48Kivqpq5
версии рабочих скриптов: pyramidapp.py и web_app2.py
https://github.com/Grag2015/Evolution/commit/06a908b8fe906067cbe910c635cdc01a47802428 и далее смотри ветку web-server
Запуск сервера: python web_app2.py pyramidapp:app

цикл статей по веб-серверу на питоне
http://www.informit.com/articles/article.aspx?p=2161679

Если размер буфера не позволяет получить все данные из запроса
http://code.activestate.com/recipes/408859/
в частности я использовал эту ф-ю recv_timeout(self.client_connection,2) вместо просто self.client_connection.recv()
def recv_timeout(the_socket,timeout=2):
    the_socket.setblocking(0)
    total_data=[];data='';begin=time.time()
    while 1:
        #if you got some data, then break after wait sec
        if total_data and time.time()-begin>timeout:
            break
        #if you got no data at all, wait a little longer
        elif time.time()-begin>timeout*2:
            break
        try:
            data=the_socket.recv(8192).decode('utf-8')
            if data:
                total_data.append(data)
                begin=time.time()
            else:
                time.sleep(0.1)
        except:
            pass
    return ''.join(total_data)
