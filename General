s="dddd"
dim(s) - список методов, применимых к данному типу

a.__dict__ - атрибуты объекта а

Объект есть любая сущность в python (функция, число, строка… словом, всё).
Класс это объект, чьим типом является type (тип можно подсмотреть в атрибуте __class__).
Экземпляр некоторого класса A — это объект, у которого в атрибуте __class__ есть ссылка на класс A.

# можно в блок Синтаксис или Управляющие конструкции
# Переключение между функциями по номеру, switch по функциям
# define the function blocks
def zero():
    print "You typed zero.\n"

def sqr():
    print "n is a perfect square\n"

def even():
    print "n is an even number\n"

def prime():
    print "n is a prime number\n"

# map the inputs to the function blocks
options = {0 : zero,
           1 : sqr,
           4 : sqr,
           9 : sqr,
           2 : even,
           3 : prime,
           5 : prime,
           7 : prime,
}
Then the equivalent switch block is invoked:

options[num]()
This begins to fall apart if you heavily depend on fall through.

Что происходит при импортировании моего модуля (по моим наблюдениям) - создается объект класса имя_моего_модуля, глобальные переменные - атрибуты, функции модуля - методы классы. И при вызове функций, которые изменяют глобальные переменные (т.е. атрибуты объекта), изменяется состояние объекта, поэтому вызов одной ф-и несколько раз с одинаковыми переменными может дать различные результаты. 

Глобальные переменные, используемые в какой-нибудь функции лучше объявлять явно с флагом global

MAP, FILTER and REDUCE
Функция map – это простейший представитель класса встроенных функций
в языке Python, используемых в функциональном программировании, то есть
функций, которые применяют другие функции к последовательностям и к
другим итерируемым объектам. Родственные ей функции отфильтровывают
элементы с помощью функций, выполняющих проверку (filter), и применяют
функции к парам элементов, накапливая результаты (reduce). Например, сле-
дующий вызов функции filter отбирает элементы последовательности больше
нуля:
>>> list(range(-5, 5)) # Итератор в Python 3.0
[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]
>>> filter((lambda x: x > 0), range(-5, 5)) # Итератор в Python 3.0
[1, 2, 3, 4]
Функция reduce в Python 2.6 была простой встроенной функцией, но в вер- Python 2.6 была простой встроенной функцией, но в вер- 2.6 была простой встроенной функцией, но в вер-
сии 3.0 она была перемещена в модуль functools и стала более сложной. Она
принимает итератор, но сама возвращает не итератор, а одиночный объект.
Ниже приводятся два вызова функции reduce, которые вычисляют сумму
и произведение элементов списка:
>>> from functools import reduce # В 3.0 требуется выполнить импортирование
>>> reduce((lambda x, y: x + y), [1, 2, 3, 4])
10
>>> reduce((lambda x, y: x * y), [1, 2, 3, 4])
24
На каждом шаге функция reduce передает текущую сумму или произведение
вместе со следующим элементом списка lambda-функции. По умолчанию пер-
вый элемент последовательности принимается в качестве начального значе-
ния
