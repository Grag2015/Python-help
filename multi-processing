Статьи 
https://habrahabr.ru/post/149420/
http://ru.stackoverflow.com/questions/452762/%D0%9F%D0%B0%D1%80%D0%B0%D0%BB%D0%BB%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5-%D0%B2%D1%8B%D0%BF%D0%BE%D0%BB%D0%BD%D0%B5%D0%BD%D0%B8%D0%B5-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B9-%D0%B2-%D1%80%D0%B0%D0%B7%D0%BD%D1%8B%D1%85-%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B0%D1%85

мой код, через оба подхода (потоки и процессы), показал странные результаты, распараллеливание увеличивало время выполнения 
(время было больше чем сумма) и сильно загрузило оперативку. По указанным ссылкам это поясняется.

# ВАРИАНТ 1 - multiprocessing
from multiprocessing import Process
from time import sleep


class A:
    def __call__(self, count=10, sleep_time=0.5):
        for i in range(100000000):
            i = i+1
        print "class A"


class B:
    def __call__(self, count=10, sleep_time=0.5):
        for i in range(100000000):
            i = i + 1
        print "class B"


if __name__ == '__main__':
    a = A()
    b = B()

    p1 = Process(target=a, kwargs={'sleep_time': 0.7})
    p2 = Process(target=b, args=(12,))
    p3 = Process(target=b, args=(12,))
    p1.start()
    p2.start()
    p3.start()

    p1.join()
    p2.join()
    p3.join()

# ВАРИАНТ 2 - через потоки
import threading

def test(n, sign):
    for i in range(n):
        i += 1
    print sign, ": ", i

t = threading.Thread(target=test, args=(100000000,1))
t2 = threading.Thread(target=test, args=(100000000,2))
t.daemon = True
t2.daemon = True
t.start()
t2.start()
t.join()
t2.join()
