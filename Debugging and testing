Профайлинг (определяет количество запусков и время исполнения функций)

import fileinput
import cProfile

pr = cProfile.Profile()
pr.enable()
main_topology(5, ["envelope",  "hall", "room", "bath", "kitchen"])
pr.disable()
pr.print_stats(sort='time')

тут описание - https://habrahabr.ru/company/mailru/blog/202832/

На самом деле поломать программу в процессе рефакторинга или оптимизации легче простого, и каждый цикл профилирования и 
переписывания кода должен в обязательном порядке сопровождаться тестированием функционала (как непосредственно затронутого 
изменениями, так и всего остального, ведь сайд-эффекты такие сайд-эффекты). Попробуем исправиться и добавим тесты в нашу программу.
Самый простой и подходящий для такого простого скрипта вариант — использовать модуль doctest.


Тесты можно содержать в самом теле функции или в отдельном файле. 
http://pythontesting.net/framework/doctest/doctest-introduction/
https://docs.python.org/2/library/doctest.html

Пример кода (обрати внимание на кавычки - они должны быть точно такими)
def multiply(a, b):
    """
    >>> t=5
    >>> multiply(t, 3)
    15
    >>> multiply('a', 3)
    'aaa'
    >>> [multiply(n,n) for n in range(3)]
    [0, 1, 4]
    """
    return a * b

Для применения тестов можно запустить в командной строке
python -m doctest -v script_name.py

или добавить в скрипт и запустить скрипт
if __name__ == "__main__":
    import doctest
    doctest.testmod()

# ОБРАБОТЧИК ОШИБОК
(x, y) = (5, 0)
def divideby2(a,b):
    return divideby(a,b)

def divideby(a,b):
    return a/b

try:
    z = divideby2(x,y)
except ZeroDivisionError: # Это имя ошибки - его смотрит в конце в консоли в конце списка Traceback об ошибке
    print "divide by zero"
